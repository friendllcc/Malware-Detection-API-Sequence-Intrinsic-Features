import numpy as np
from keras.models import load_model
from sklearn.metrics import f1_score, precision_score, recall_score, accuracy_score

# load data
data = np.load('./data.npz', allow_pickle=True)
train_x_name = data['train_x_name']  # API sequences index for training
train_x_semantic = data['train_x_semantic']  # semantic chain index for training
train_y = data['train_y']  # label for training
test_x_name = data['test_x_name']  # API sequences index for test
test_x_semantic = data['test_x_semantic']  # semantic chain index for test
test_y = data['test_y']  # label for test
train_MD5 = data['train_MD5']  # training samples' MD5 index
test_MD5 = data['test_MD5']  # test samples' MD5 index

model = load_model('model.h5')

val_predict = np.asarray(model.predict([train_x_name, train_x_semantic])).round()  ##.model
val_targ = train_y  ###.model
_val_acc = accuracy_score(val_targ, val_predict)
_val_recall = recall_score(val_targ, val_predict)  ###
_val_precision = precision_score(val_targ, val_predict)  ###
_val_f1 = f1_score(val_targ, val_predict)
print("\n-val_acc: {} — val_precision: {} — val_recall: {} — val_f1:{}".format(_val_acc,
                                                                               _val_precision,
                                                                               _val_recall,
                                                                               _val_f1))

val_predict = np.asarray(model.predict([test_x_name, test_x_semantic])).round()  ##.model
val_targ = test_y  ###.model
_val_acc = accuracy_score(val_targ, val_predict)
_val_recall = recall_score(val_targ, val_predict)  ###
_val_precision = precision_score(val_targ, val_predict)  ###
_val_f1 = f1_score(val_targ, val_predict)
print("\n-test_acc: {} — test_precision: {} — test_recall: {} — test_f1:{}".format(_val_acc,
                                                                                   _val_precision,
                                                                                   _val_recall,
                                                                                   _val_f1))
